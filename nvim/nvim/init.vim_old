set autoindent smartindent
set background=light
set colorcolumn=80
set ignorecase
set lcs+=space:·
set list
set matchpairs+=<:>
set mouse=a
set nobackup
set nohlsearch
set noshowmode nowrap
set noswapfile
set number relativenumber numberwidth=4
set scrolloff=8
set shiftwidth=4
set showmatch
set signcolumn=yes
set splitbelow
set tabstop=2 softtabstop=2 expandtab
set undodir=~/.vim./undodir undofile
set wildmode

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

Plug 'dense-analysis/ale'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'mfussenegger/nvim-dap'
Plug 'rcarriga/nvim-dap-ui'
Plug 'puremourning/vimspector'

Plug 'OmniSharp/omnisharp-vim'
Plug 'nickspoons/vim-sharpenup'

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'maximbaz/lightline-ale'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', {'do': 'make' }
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'shatur/neovim-session-manager'

Plug 'kyazdani42/nvim-web-devicons'
Plug 'kyazdani42/nvim-tree.lua'
" Plug 'preservim/nerdtree'

Plug 'jiangmiao/auto-pairs'
Plug 'nvim-lua/completion-nvim'
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'nvim-treesitter/nvim-treesitter-context'

call plug#end()

filetype plugin indent on
syntax on
colorscheme solarized

let mapleader=" "

lua require('pixel/init')
" lua require('python')

" NERDTree {{{
" " Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
" autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
"     \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
" }}}


" ALE {{{
let g:ale_sign_error='•'
let g:ale_sign_warning='•'
let g:ale_sign_info='·'
let g:ale_sign_style_error='·'
let g:ale_sign_style_warning='·'

let g:ale_linters = { 'cs' : ['OmniSharp']}
" }}}


" augroup OmniSharpenUp
"     autocmd!
"     autocmd User OmniSharpProjectUpdated,OmniSharpReady call lightline#update()
" augroup END

function! ImportConfig(file)
  exec printf('source %s', fnamemodify(expand('$MYVIMRC'), ':h') . expand('/') . a:file)
endfunction

call ImportConfig('omnisharp.vim')
call ImportConfig('dap.vim')

imap <c-space> <Plug>(async_force_refresh)
inoremap <expr> <Tab>   pumvisible() ? '<C-n>' : '<Tab>'
inoremap <expr> <S-Tab> pumvisible() ? '<C-p>' : '<S-Tab>'
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : '<cr>'

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

nnoremap <leader>e :NvimTreeToggle<cr>
nnoremap <C-f> :NvimTreeFindFile<cr>

""" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
" nnoremap <leader>fg <cmd>Telescope live_grep<cr>
" nnoremap <leader>fb <cmd>Telescope buffers<cr>
" nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" nnoremap <C-p> :<C-u>FZF<CR>

" let g:context_enabled = 0

nnoremap <leader>dbs :so ~/.config/nvim/init.vim<CR>






